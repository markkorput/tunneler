// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Astroid = (function(_super) {
    __extends(Astroid, _super);

    function Astroid() {
      _ref = Astroid.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Astroid.prototype.initialize = function() {
      this.destroy();
      this.scene = this.get('scene');
      this.camera = this.get('camera');
      this.geometry = new THREE.CubeGeometry(50, 50, 50);
      this.material = new THREE.MeshLambertMaterial({
        color: 0xFF0000
      });
      return this.mesh = this._generateMesh();
    };

    Astroid.prototype.destroy = function() {
      this.trigger('destroy');
      if (this.mesh) {
        this.scene.remove(this.mesh);
        this.mesh = void 0;
      }
      this.scene = this.camera = this.geometry = this.material = void 0;
      return Astroid.__super__.destroy.call(this);
    };

    Astroid.prototype._generateMesh = function() {
      var mesh;
      mesh = new THREE.Mesh(this.geometry, this.material);
      mesh.position.x = 0;
      mesh.position.y = 0;
      mesh.position.z = this.camera.position.z - 100;
      return mesh;
    };

    Astroid.prototype.hide = function() {
      if (this.mesh) {
        return this.scene.remove(this.mesh);
      }
    };

    Astroid.prototype.show = function() {
      if (this.mesh) {
        return this.scene.add(this.mesh);
      }
    };

    Astroid.prototype.update = function(progress) {
      var s;
      this.show();
      if (this.mesh) {
        this.mesh.position.z = this.camera.position.z - 100 - 40 * progress;
        this.mesh.rotation.x += progress * -0.02;
        this.mesh.rotation.y += progress * 0.01;
        s = Math.sin(progress * Math.PI);
        return this.mesh.scale = new THREE.Vector3(s, s, s);
      }
    };

    return Astroid;

  })(Backbone.Model);

}).call(this);
