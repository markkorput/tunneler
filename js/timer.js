// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Timer = (function(_super) {
    __extends(Timer, _super);

    function Timer() {
      _ref = Timer.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Timer.prototype.initialize = function() {
      this.on('change:state', this._onStateChange, this);
      this.on('end', (function() {
        if (this._looping()) {
          return this.trigger('loop reset');
        }
      }), this);
      this.on('end', (function() {
        if (!this._looping()) {
          return this.set({
            progress: 1,
            time: this.get('duration')
          }).stop();
        }
      }), this);
      this.on('reset', (function() {
        return this.set({
          startTime: this.get('startTime') + this.get('duration')
        });
      }), this);
      return this.stop();
    };

    Timer.prototype.start = function() {
      return this.set({
        state: 'playing'
      });
    };

    Timer.prototype.stop = function() {
      return this.set({
        state: 'stopped'
      });
    };

    Timer.prototype.setPaused = function(pause) {
      if (pause) {
        return this.set({
          state: 'paused'
        });
      } else {
        return this.set({
          state: 'playing'
        });
      }
    };

    Timer.prototype.curTime = function() {
      return new Date().getTime();
    };

    Timer.prototype._time = function() {
      if (this.get('startTime')) {
        return this.curTime() - this.get('startTime');
      }
    };

    Timer.prototype._progress = function() {
      var d, t;
      if ((t = this._time()) && (d = this.get('duration'))) {
        return t * 1.0 / d;
      }
    };

    Timer.prototype.setProgress = function(prog) {
      return this.set({
        startTime: this.curTime() - prog * this.get('duration')
      });
    };

    Timer.prototype._looping = function() {
      return this.get('loop') !== false;
    };

    Timer.prototype.update = function() {
      var data;
      if (this.get('state') === 'playing') {
        data = {
          time: this._time(),
          progress: this._progress()
        };
        if (data.progress && data.progress > 1) {
          this.trigger('end');
          return;
        }
        return this.set(data);
      }
    };

    Timer.prototype._onStateChange = function(timer, state, obj) {
      if (state === 'playing') {
        if (this.previous('state') === 'paused') {
          this.setProgress(this.get('progress'));
        }
        if (this.previous('state') === 'stopped') {
          this.set({
            startTime: this.curTime()
          });
        }
      }
      if (state === 'stopped') {
        return this.set({
          stopTime: this.curTime()
        });
      }
    };

    return Timer;

  })(Backbone.Model);

}).call(this);
